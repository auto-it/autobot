import { PullRequestPlugin, PullRequestAction } from "../plugin";
import { Hooks, PRContext } from "../autobot";
import { getLogger } from "../utils/logger";
import { LabelRelease, LabelError } from "./calculate-release-by-labels";
import { Config } from "../config";
import dedent from "dedent";
import { createChecklist } from "../models/checklist";
import { renderLabel, populateLabel } from "../models/label";
import { sub, italics, bold } from "../utils/markdown";

const logger = getLogger("pr-onboarding");

const MessageStart = "<!--- AutoPR:START --->";
const MessageEnd = "<!--- AutoPR:END --->";

export class PROnBoarding extends PullRequestPlugin {
  private hasLabels: boolean = false;
  public name = "PROnBoarding";
  public actions = [
    PullRequestAction.opened,
    PullRequestAction.edited,
    PullRequestAction.labeled,
    PullRequestAction.unlabeled,
  ];

  public apply(prHooks: Hooks["pr"]) {
    logger.debug(`Applying hooks for ${this.name}`);
    prHooks.onReleaseType.tap(this.name, this.checkLabels);
    prHooks.process.tapPromise(this.name, this.onBoard);
  }

  private checkLabels = (release: LabelRelease) => {
    if (release.kind === "invalid" && release.reason === LabelError.NoLabels) {
      this.hasLabels = false;
    } else {
      this.hasLabels = true;
    }
  };

  private onBoard = async (context: PRContext, config: Config) => {
    // TODO: Check if feature is enabled
    if (context.payload.action === PullRequestAction.opened && this.hasLabels === false) {
      const { owner, repo, number: issue_number } = context.issue();
      // Initial on-boarding
      context.github.issues.update({
        owner,
        repo,
        issue_number,
        body:
          context.payload.pull_request.body +
          "\n\n" +
          this.onBoardingMessage(await this.createSections(context, config)),
      });
    }
  };

  private onBoardingMessage = (sections: string[]) => dedent`
    <!-- DO NOT EDIT -->
    ${MessageStart} 
    ---

    <img align="left" width="60" src="https://autobot.auto-it.now.sh/public/logo.png"/>

    ### Choose a release label

    This repository uses [auto](https://github.com/intuit/auto) to generate releases. In order to do that, 
    it needs an appropriate label assigned to each PR. Choose a label below that you feel best suites your changes.

    ${sections.join("\n\n")}
    
    <sub>_Generated by [auto-it](https://github.com/apps/auto-it)_</sub>
    ${MessageEnd} 
  `;

  private createSections = async (context: PRContext, config: Config, update = false) => {
    const section = (title: string, checklist: string) => dedent`
    ##

    ${title}
    
    ${checklist}
    `;
    const withDescription = (description: string) => `&nbsp;&nbsp;<sub><b>${description}</b></sub>`;

    const semverHead = sub(italics(`${bold("Semver Labels")} (choose at most one)`));
    const semverChecklist = createChecklist(
      "auto",
      "semver",
      await Promise.all(
        ["major", "minor", "patch"].map(async labelType => {
          const label = await populateLabel(labelType, config.labels[labelType], context);

          return {
            id: labelType,
            checked: false,
            body: `${renderLabel(label.color, label.name)} ${withDescription(label.description)}`,
          };
        }),
      ),
    );

    return [section(semverHead, semverChecklist)];
  };
}
